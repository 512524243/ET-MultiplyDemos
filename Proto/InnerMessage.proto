	/// <summary>
	/// Sekia
	/// </summary>
	//客户端地图移动消息
	message A0004_PlayerOnline_G2R // IMessage
	{
		int32 RpcId = 90;
		int64 UserID = 1;
		int32 GateAppID = 2;
	}

	message A0005_PlayerOffline_G2R // IMessage
	{
		int32 RpcId = 90;
		int64 UserID = 1;
	}
	
	message A0006_GetLoginKey_R2G // IRequest
	{
		int32 RpcId = 90;
		int64 UserID = 1;
	}
	
	message A0006_GetLoginKey_G2R // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
        int64 GateLoginKey = 1;
	}
	
	message	A0007_KickOutPlayer_R2G // IRequest
	{
		int32 RpcId = 90;
		int64 UserID = 1;
	}

	message	A0007_KickOutPlayer_G2R // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
		int64 HeroID = 1; // 创建房间成功 返回1个英雄ID
	}
	
	//Gate通知Map创建5V5房间 空缺的人由机器人代替
	message	B1001_CreateRobotMatch5V5_G2M // IMessage
	{
		int32 RpcId = 90;
		int64 UserID = 1; // 申请创建房间的玩家的UserID
		int64 ActorIDofUser = 2; //便于通知Gate
		int64 ActorIDofClient = 3; //便于通知Client
	}
	
	//Map通知Gate创建5V5房间成功
	message	B1002_Match5V5Sucess_M2G // IActorMessage
	{
		int32 RpcId = 90;
		long ActorId = 94;
		int64 ActorIDofGamer = 1; // 通知Gate更新ActorIDforClient
	}
	
	
	
	
	
	/// <summary>
	/// 斗地主
	/// </summary>
	//Gate通知Map玩家掉线
	message Actor_PlayerExitRoom // IActorMessage
    {
		int32 RpcId = 90;
		int64 ActorId = 94;
    }
	
	//匹配阶段
	//Map通知Gate匹配成功
	message Actor_LandlordsMatchSucess // IActorMessage
    {
		int64 ActorId = 94;
        int64 ActorIDofGamer = 1;
    }

	//Gate通知Map 玩家请求匹配
	message G2M_EnterMatch_Landords // IMessage
    {
		int32 RpcId = 90;
        int64 UserID = 1; // 玩家永久ID
		int64 ActorIDofUser = 2; //Gate上User的Actor
		int64 ActorIDofClient = 3; //Gate上Client的Actor
    }
	
	//登陆阶段
	//Gate通知Realm 玩家下线
	message G2R_PlayerOffline // IMessage
    {
		int32 RpcId = 90;
        int64 UserID = 1;
    }
	
	//Gate通知Realm 玩家上线
	message G2R_PlayerOnline // IMessage
    {
		int32 RpcId = 90;
        int64 UserID = 1;
        int32 GateAppID = 2;
    }
	
	//Real请求Gate登陆Key
	message R2G_GetLoginKey_Req // IRequest
    {
		int32 RpcId = 90;
        int64 UserID = 1;
    }

    message G2R_GetLoginKey_Back // IResponse
    {
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
        int64 Key = 1;
    }
	
	//异步踢玩家下线
    message R2G_PlayerKickOut_Req // IRequest
    {
		int32 RpcId = 90;
        int64 UserID = 1;
    }

    message G2R_PlayerKickOut_Back // IResponse
    {
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
    }









	
	
	/// <summary>
	/// ET
	/// </summary>
	message M2M_TrasferUnitRequest // IRequest
	{
		int32 RpcId = 90;
		Unit Unit = 1;
	}
	
	message M2M_TrasferUnitResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;

		int64 InstanceId = 1;
	}
	
	message M2A_Reload // IRequest
	{
		int32 RpcId = 90;
	}

	message A2M_Reload // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
	}

	message G2G_LockRequest // IRequest
	{
		int32 RpcId = 90;
		int64 Id = 1;
		string Address = 2;
	}

	message G2G_LockResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
	}

	message G2G_LockReleaseRequest // IRequest
	{
		int32 RpcId = 90;
		int64 Id = 1;
		string Address = 2;
	}

	message G2G_LockReleaseResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
	}

	message DBSaveRequest // IRequest
	{
		int32 RpcId = 90;

		string CollectionName = 1;
		ComponentWithId Component = 2;
	}


	message DBSaveBatchResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
	}

	message DBSaveBatchRequest // IRequest
	{
		int32 RpcId = 90;

		string CollectionName = 1;
		repeated ComponentWithId Components = 2;
	}

	message DBSaveResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
	}

	message DBQueryRequest // IRequest
	{
		int32 RpcId = 90;
		int64 Id = 1;
		string CollectionName = 2;
	}

	message DBQueryResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;

		ComponentWithId Component = 1;
	}

	message DBQueryBatchRequest // IRequest
	{
		int32 RpcId = 90;
		string CollectionName = 1;
		repeated int64 IdList = 2;
	}

	message DBQueryBatchResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;

		repeated ComponentWithId Components = 1;
	}

	message DBQueryJsonRequest // IRequest
	{
		int32 RpcId = 90;
		string CollectionName = 1;
		string Json = 2;
	}

	message DBQueryJsonResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;

		repeated ComponentWithId Components = 1;
	}

	message ObjectAddRequest // IRequest
	{
		int32 RpcId = 90;
		int64 Key = 1;
		int64 InstanceId = 2;
	}

	message ObjectAddResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
	}

	message ObjectRemoveRequest // IRequest
	{
		int32 RpcId = 90;
		int64 Key = 1;
	}

	message ObjectRemoveResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
	}

	message ObjectLockRequest // IRequest
	{
		int32 RpcId = 90;
		int64 Key = 1;
		int64 InstanceId = 2;
		int Time = 3;
	}

	message ObjectLockResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
	}

	message ObjectUnLockRequest // IRequest
	{
		int32 RpcId = 90;
		int64 Key = 1;
		int64 OldInstanceId = 2;
		int64 InstanceId = 3;
	}

	message ObjectUnLockResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;
	}

	message ObjectGetRequest // IRequest
	{
		int32 RpcId = 90;
		int64 Key = 1;
	}

	message ObjectGetResponse // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;

		int64 InstanceId = 1;
	}

	message R2G_GetLoginKey // IRequest
	{
		int32 RpcId = 90;
		string Account = 1;
	}

	message G2R_GetLoginKey // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;

		int64 Key = 1;
	}

	message G2M_CreateUnit // IRequest
	{
		int32 RpcId = 90;
		int64 PlayerId = 1;
		int64 GateSessionId = 2;
	}

	message M2G_CreateUnit // IResponse
	{
		int32 RpcId = 90;
		int32 Error = 91;
		string Message = 92;

		// 自己的unit id
		int64 UnitId = 1;
		// 所有的unit
		repeated UnitInfo Units = 2;
	}

	message G2M_SessionDisconnect // IActorLocationMessage
	{
		int32 RpcId = 90;
		long ActorId = 94;
	}
}