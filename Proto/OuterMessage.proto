syntax = "proto3";
package ETModel;

//客户端请求在当前账号下创建新的角色
message A0009_CreateNewCharacter_C2G // IRequest
{
	int32 RpcId = 90;
	string Name = 1; // 角色名
	SkeletonType Skeleton = 2; //骨骼编号
	CareerType Career = 3; // 职业编号
	int32 Seat = 4; // 角色位置
}

message A0009_CreateNewCharacter_G2C // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//玩家请求自己的个人信息 不需要参数
message A0008_GetUserInfo_C2G // IRequest
{
	int32 RpcId = 90;
}

//获得用户名和用户等级
message A0008_GetUserInfo_G2C // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	repeated CharacterInfo Characters = 1;
	int32 LastPlay = 2; //上次游戏使用的角色 1、2、3
}

//单个角色的简要描述
message CharacterInfo
{
	string Name = 1; // 角色名
	int32 Level = 2; // 角色等级
	CareerType Career = 3; // 职业编号
	PetType Pet = 4; // 宠物编号
	SkeletonType Skeleton = 5; // 骨骼编号
	WeaponType Weapon = 6; //武器编号
	RegionType Region = 7; // 区域编号
	int32 X = 8; // 坐标
	int32 Y = 9;
	int32 Z = 10;
	HeadType Head = 11;
	ChestType Chest = 12;
	HandType Hand = 13;
	FeetType Feet = 14;
	int32 Money = 15; //MMO金钱
	int32 Mail = 16; //未读邮件数量
}

//职业编号 必须项
enum CareerType
{
	Warror = 0; // 战士
    Paladin = 1; // 骑士
	Hunter = 2; // 猎人
	Shaman = 3; //萨满
	Rogue = 4; // 盗贼
	Warlock = 5; // 术士
	Mage = 6; // 法师
	Priest = 7; // 牧师
	Druid = 8; // 德鲁伊
}

//宠物编号
enum PetType
{
	NonePet = 0; //没有出战中的宠物
	Cat = 1; // 猫
    Dog = 2; // 狗
}

//模型编号 必须项
enum SkeletonType
{
	Man = 0; // 男性
    Women = 1; // 女性
}

//武器编号
enum WeaponType
{
	NoneWeapon = 0; //没有穿
	Sword = 1; // 剑
    Wand = 2; // 法杖
}

//头部装备编号
enum HeadType
{
	NoneHead = 0; // 没有穿 提供空的模型
	Head1 = 1;
    Head2 = 2;
}

//胸装备编号
enum ChestType
{
	NoneChest = 0; // 没有穿 给默认上衣
	Chest1 = 1;
    Chest2 = 2;
}

//手部装备编号
enum HandType
{
	NoneHand = 0; // 没有穿 提供空的模型
	Hand1 = 1;
    Hand2 = 2;
}

//腿部装备编号
enum FeetType
{
	NoneFeet = 0; // 没有穿 给默认裤子
	Feet1 = 1;
    Feet2 = 2;
}

//区域类型
enum RegionType
{
	NoneRegion = 0;
	Village = 1;     //村
    City = 2;   //城镇
	Forest = 3;   //森林
	Mine = 4;   //矿山
}

message A0003_LoginGate_C2G // IRequest
{
	int32 RpcId = 90;
	int64 GateLoginKey = 1;
}

message A0003_LoginGate_G2C // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 UserID = 1;
}

//客户端登陆请求
message A0002_Login_C2R // IRequest
{
	int32 RpcId = 90;
	string Account = 1; //假定的账号
	string Password = 2; //假定的密码
}

message A0002_Login_R2C // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string GateAddress = 1;
	int64 GateLoginKey = 2;
}

//客户端注册请求
message A0001_Register_C2R // IRequest
{
	int32 RpcId = 90;
	string Account = 1; //假定的账号
	string Password = 2; //假定的密码
}

//客户端注册请求回复
message A0001_Register_R2C // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//----斗地主
message Card
{
	int32 CardWeight = 1;
	int32 CardSuits = 2;
}

message G2C_GetUserInfo_Back // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string NickName = 1;
	int32 Wins = 2;
	int32 Loses = 3;
	int64 Money = 4;
}

message C2G_GetUserInfo_Req // IRequest
{
	int32 RpcId = 90;
	int64 UserID = 1;
}

//----ET
message Actor_Test // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	string Info = 1;
}

message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	string request = 1;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string response = 1;
}

message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int32 MapIndex = 1;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message C2G_EnterMap // IRequest
{
	int32 RpcId = 90;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	// 自己的unit id
	int64 UnitId = 1;
	// 所有的unit
	repeated UnitInfo Units = 2;
}

message UnitInfo
{
	int64 UnitId  = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;
}

message M2C_CreateUnits // IActorMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
    repeated UnitInfo Units = 1;
}

message Frame_ClickMap // IActorLocationMessage
{
	int32 RpcId = 90;
	int64 ActorId = 93;
	int64 Id = 94;
	
	float X = 1;
	float Y = 2;
	float Z = 3;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 ActorId = 93;
	
	int64 Id = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;
	
	repeated float Xs = 5;
	repeated float Ys = 6;
	repeated float Zs = 7;
}


message C2R_Ping // IRequest
{
	int32 RpcId = 90;
}

message R2C_Ping // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

message G2C_Test // IMessage
{
}

message C2M_Reload // IRequest
{
	int32 RpcId = 90;
	string Account = 1;
	string Password = 2;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}